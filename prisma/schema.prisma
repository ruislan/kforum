generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String  @unique
  password String
  phone    String?
  bio      String?
  avatar   String?
  gender   String?
  isLocked Boolean @default(false) @map("is_locked")
  isAdmin  Boolean @default(false) @map("is_admin")

  lastLoginAt DateTime? @map("last_login_at")
  lastLoginIp String?   @map("last_login_ip")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // ref
  discussions Discussion[]
  posts       Post[]
  reactions   PostReactionRef[]
}

model Discussion {
  id            Int     @id @default(autoincrement())
  title         String // 标题
  isSticky      Boolean @default(false) @map("is_sticky") // 是否置顶
  isLocked      Boolean @default(false) @map("is_locked") // 是否锁帖，锁帖之后就不能继续回复了
  isHidden      Boolean @default(false) @map("is_hidden") // 是否隐藏，隐藏了无法被找到
  viewCount     Int     @default(1) @map("view_count") // 浏览统计
  userCount     Int     @default(1) @map("user_count") // 不重复用户统计
  shareCount    Int     @default(1) @map("share_count") // 分享链接的统计
  reactionCount Int     @default(1) @map("reaction_count") // 反馈统计

  userId          Int       @map("user_id")
  firstPostId     Int?      @unique @map("first_post_id")
  lastPostId      Int?      @unique @map("last_post_id")
  lastPostedAt    DateTime? @map("last_posted_at") // 最后一个回帖的
  categoryId      Int       @map("category_id")
  lastUpdatedUser Int?      @map("last_updated_user") // 最后一个编辑的用户（不一定是本人，也可能是版主）
  lastUpdatedAt   DateTime? @map("last_updated_at") // 最后一次编辑的时间

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // ref
  category  Category @relation(fields: [categoryId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  lastPost  Post?    @relation(name: "last_post", fields: [lastPostId], references: [id])
  firstPost Post?    @relation(name: "first_post", fields: [firstPostId], references: [id])
  posts     Post[]   @relation(name: "posts")

  @@index([isSticky])
}

model Post {
  id          Int     @id @default(autoincrement())
  content     String // 内容，富文本框修饰之后的
  text        String // 内容，去掉富文本框之后的只有文本的内容
  type        String // 类型，有可能有投票之类的
  ip          String? // 发布人的 IP 地址
  replyPostId Int? // 回复哪一贴

  discussionId    Int       @map("discussion_id")
  userId          Int       @map("user_id")
  lastUpdatedUser Int?      @map("last_updated_user") // 最后一个编辑的用户（不一定是本人，也可能是版主）
  lastUpdatedAt   DateTime? @map("last_updated_at") // 最后一次编辑的时间

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // ref
  user                User              @relation(fields: [userId], references: [id])
  replyPost           Post?             @relation(name: "replies", fields: [replyPostId], references: [id])
  discussion          Discussion        @relation(name: "posts", fields: [discussionId], references: [id])
  firstPostDiscussion Discussion?       @relation(name: "first_post")
  lastPostDiscussion  Discussion?       @relation(name: "last_post")
  reactions           PostReactionRef[]
  replies             Post[]            @relation(name: "replies")
}

model Reaction {
  id       Int    @id @default(autoincrement())
  name     String @unique
  icon     String
  position Int    @default(100)

  createdAt DateTime @default(now()) @map("created_at")

  // ref
  posts PostReactionRef[]
}

model PostReactionRef {
  postId     Int
  reactionId Int
  userId     Int
  createdAt  DateTime @default(now()) @map("created_at")

  post     Post     @relation(fields: [postId], references: [id])
  reaction Reaction @relation(fields: [reactionId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@id([postId, reactionId, userId])
}

model Category {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  name        String   @unique
  sequence    Int      @default(0)
  icon        String?
  color       String?
  description String?
  parentId    Int? // parent
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // ref
  discussions Discussion[]
}

// each discussion has no more than 5 tags
model Tag {
  name      String   @id
  createdAt DateTime @default(now()) @map("created_at")
}

// WebSite Menu
model WebNavMenus {
  name     String  @id
  url      String  @default("#")
  isOpen   Boolean @default(false) @map("is_open") // open in another tab, taget="_blank"
  sequence Int     @default(0)
}
