generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement()) @db.UnsignedInt
  email     String  @unique @db.VarChar(256)
  name      String  @unique @db.VarChar(64)
  password  String  @db.VarChar(256)
  avatarUrl String? @map("avatar_url") @db.VarChar(2048) // 通常是 UploadAvatarRef 对应的 Upload 的 Url，但是也有可能是一个 Avatar 服务的地址呢？
  bio       String? @db.VarChar(512)
  gender    String? @db.VarChar(16)
  isLocked  Boolean @default(false) @map("is_locked")
  isAdmin   Boolean @default(false) @map("is_admin")

  lastLoginAt DateTime? @map("last_login_at")
  lastLoginIp String?   @map("last_login_ip")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // ref
  discussions Discussion[]
  posts       Post[]
  reactions   PostReactionRef[]
  avatar      UploadAvatarRef?
}

model Discussion {
  id            Int     @id @default(autoincrement()) @db.UnsignedInt
  title         String  @db.VarChar(512) // 标题
  isSticky      Boolean @default(false) @map("is_sticky") // 是否置顶
  isLocked      Boolean @default(false) @map("is_locked") // 是否锁帖，锁帖之后就不能继续回复了
  isHidden      Boolean @default(false) @map("is_hidden") // 是否隐藏，隐藏了无法被找到
  viewCount     Int     @default(1) @map("view_count") @db.UnsignedInt // 浏览统计
  userCount     Int     @default(1) @map("user_count") @db.UnsignedInt // 不重复用户统计
  shareCount    Int     @default(0) @map("share_count") @db.UnsignedInt // 分享链接的统计
  reactionCount Int     @default(0) @map("reaction_count") @db.UnsignedInt // 全部帖子的反馈统计
  postCount     Int     @default(1) @map("post_count") // 帖子统计

  userId          Int       @map("user_id") @db.UnsignedInt
  firstPostId     Int?      @unique @map("first_post_id") @db.UnsignedInt
  lastPostId      Int?      @unique @map("last_post_id") @db.UnsignedInt
  lastPostedAt    DateTime? @map("last_posted_at") // 最后一个回复的
  categoryId      Int       @map("category_id") @db.UnsignedInt
  lastUpdatedUser Int?      @map("last_updated_user") @db.UnsignedInt // 最后一个编辑的用户（不一定是本人，也可能是版主）
  lastUpdatedAt   DateTime? @map("last_updated_at") // 最后一次编辑的时间

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // ref
  category  Category @relation(fields: [categoryId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  lastPost  Post?    @relation(name: "last_post", fields: [lastPostId], references: [id])
  firstPost Post?    @relation(name: "first_post", fields: [firstPostId], references: [id])
  posts     Post[]   @relation(name: "posts")

  @@index([createdAt, isSticky])
}

model Post {
  id          Int     @id @default(autoincrement()) @db.UnsignedInt
  content     String  @db.Text // 内容，富文本框修饰之后的
  text        String  @db.Text // 内容，去掉富文本框之后的只有文本的内容
  type        String  @db.VarChar(64) // 类型，有可能有投票之类的
  ip          String? @db.VarChar(64) // 发布人的 IP 地址
  replyPostId Int?    @map("reply_post_id") @db.UnsignedInt // 回复哪一贴

  discussionId    Int       @map("discussion_id") @db.UnsignedInt
  userId          Int       @map("user_id") @db.UnsignedInt
  lastUpdatedUser Int?      @map("last_updated_user") @db.UnsignedInt // 最后一个编辑的用户（不一定是本人，也可能是版主）
  lastUpdatedAt   DateTime? @map("last_updated_at") // 最后一次编辑的时间

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // ref
  user                User              @relation(fields: [userId], references: [id])
  replyPost           Post?             @relation(name: "replies", fields: [replyPostId], references: [id])
  discussion          Discussion        @relation(name: "posts", fields: [discussionId], references: [id])
  firstPostDiscussion Discussion?       @relation(name: "first_post")
  lastPostDiscussion  Discussion?       @relation(name: "last_post")
  reactions           PostReactionRef[]
  replies             Post[]            @relation(name: "replies")
  images              UploadPostRef[]

  @@index([id, discussionId])
  @@index([discussionId, createdAt])
  @@index([userId, createdAt])
}

model Upload {
  id               Int    @id @default(autoincrement()) @db.UnsignedInt
  userId           Int    @map("user_id") @db.UnsignedInt // who uploaded first
  originalFileName String @map("original_file_name") @db.VarChar(256)
  fileSize         BigInt @map("file_size") @db.BigInt
  checksum         String @unique @db.VarChar(256)
  url              String @db.VarChar(2048)

  createdAt DateTime @default(now()) @map("created_at")

  //ref
  posts   UploadPostRef[]
  avatars UploadAvatarRef[]
}

// 图片头像引用
model UploadAvatarRef {
  userId    Int      @id @map("user_id") @db.UnsignedInt
  uploadId  Int      @map("upload_id") @db.UnsignedInt
  createdAt DateTime @default(now()) @map("created_at")

  // ref
  upload Upload @relation(fields: [uploadId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

// 图片帖子引用
model UploadPostRef {
  postId    Int      @map("post_id") @db.UnsignedInt
  uploadId  Int      @map("upload_id") @db.UnsignedInt
  createdAt DateTime @default(now()) @map("created_at")

  // ref
  upload Upload @relation(fields: [uploadId], references: [id])
  post   Post   @relation(fields: [postId], references: [id])

  @@id([uploadId, postId])
}

model Reaction {
  id       Int    @id @default(autoincrement()) @db.UnsignedInt
  name     String @unique @db.VarChar(64)
  icon     String @db.VarChar(2048)
  position Int    @default(100) @db.UnsignedInt

  createdAt DateTime @default(now()) @map("created_at")

  // ref
  posts PostReactionRef[]
}

model PostReactionRef {
  postId     Int      @map("post_id") @db.UnsignedInt
  reactionId Int      @map("reaction_id") @db.UnsignedInt
  userId     Int      @map("user_id") @db.UnsignedInt
  createdAt  DateTime @default(now()) @map("created_at")

  post     Post     @relation(fields: [postId], references: [id])
  reaction Reaction @relation(fields: [reactionId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@id([postId, reactionId, userId])
}

model Category {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  slug        String   @unique @db.VarChar(64)
  name        String   @unique @db.VarChar(64)
  sequence    Int      @default(0) @db.UnsignedInt
  icon        String?  @db.VarChar(512)
  color       String?  @db.VarChar(16)
  description String?  @db.VarChar(512)
  parentId    Int?     @map("parent_id") @db.UnsignedInt // parent
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // ref
  discussions Discussion[]
}

// each discussion has no more than 5 tags
model Tag {
  name      String   @id @db.VarChar(64)
  createdAt DateTime @default(now()) @map("created_at")
}

// Site Menu
model SiteNavMenus {
  name     String  @id @db.VarChar(64)
  url      String  @default("#") @db.VarChar(2048)
  isOpen   Boolean @default(false) @map("is_open") // open in another tab, taget="_blank"
  sequence Int     @default(0) @db.UnsignedInt
}

// Site Settings
model SiteSettings {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  dataType    String   @map("data_type") @db.VarChar(16) // string(input), text(textarea), number, json, html, xml, etc...
  key         String   @unique @db.VarChar(64)
  description String?  @db.VarChar(128)
  name        String   @db.VarChar(64)
  value       String   @db.VarChar(256)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}
