generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int     @id @default(autoincrement()) @db.UnsignedInt
  email       String  @unique @db.VarChar(256)
  name        String  @unique @db.VarChar(64)
  password    String  @db.VarChar(256)
  avatarUrl   String? @map("avatar_url") @db.VarChar(2048) // 通常是 UploadAvatarRef 对应的 Upload 的 Url，但是也有可能是一个 Avatar 服务的地址呢？
  bio         String? @db.VarChar(512)
  gender      String? @db.VarChar(16)
  isLocked    Boolean @default(false) @map("is_locked") // 锁定的用户无法登录，管理员和版主无法被锁定
  isAdmin     Boolean @default(false) @map("is_admin") // 是否是管理员，管理员管理网站
  isModerator Boolean @default(false) @map("is_moderator") // 是否是版主，版主管理内容

  lastLoginAt DateTime? @map("last_login_at")
  lastLoginIp String?   @map("last_login_ip")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // ref
  discussions          Discussion[]         @relation(name: "userDiscussions")
  deletedDiscussions   Discussion[]         @relation(name: "userDeletedDiscussions")
  posts                Post[]               @relation(name: "userPosts")
  deletedPosts         Post[]               @relation(name: "userDeletedPosts")
  reactions            ReactionPostRef[]
  avatar               UploadAvatarRef?
  reports              Report[]             @relation(name: "userReports")
  ignoredReports       Report[]             @relation(name: "userIgnoredReports")
  agreedReports        Report[]             @relation(name: "userAgreedReports")
  tags                 TagDiscussionRef[]
  bookmarks            Bookmark[]
  notifications        Notification[]
  followingDiscussions DiscussionFollower[] // 关注的话题
  followingUsers       UserFollower[] // 关注的人
}

model UserFollower {
  followingId Int      @map("following_id") @db.UnsignedInt
  userId      Int      @map("user_id") @db.UnsignedInt
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  //ref
  user User @relation(fields: [userId], references: [id])

  @@id([followingId, userId])
}

model Discussion {
  id            Int     @id @default(autoincrement()) @db.UnsignedInt
  title         String  @db.VarChar(512) // 标题
  isSticky      Boolean @default(false) @map("is_sticky") // 是否置顶
  isLocked      Boolean @default(false) @map("is_locked") // 是否锁帖，锁帖之后就不能继续回复了
  isHidden      Boolean @default(false) @map("is_hidden") // 是否隐藏，隐藏了无法被找到
  viewCount     Int     @default(1) @map("view_count") @db.UnsignedInt // 浏览统计
  userCount     Int     @default(1) @map("user_count") @db.UnsignedInt // 不重复用户统计
  shareCount    Int     @default(0) @map("share_count") @db.UnsignedInt // 分享链接的统计
  reactionCount Int     @default(0) @map("reaction_count") @db.UnsignedInt // 全部帖子的反馈统计
  postCount     Int     @default(1) @map("post_count") // 帖子统计
  hotnessScore  Int     @default(0) @map("hotness_score") // 热度分数

  posterId          Int?      @map("poster_id") @db.UnsignedInt
  userId            Int       @map("user_id") @db.UnsignedInt
  firstPostId       Int?      @unique @map("first_post_id") @db.UnsignedInt
  lastPostId        Int?      @unique @map("last_post_id") @db.UnsignedInt
  lastPostedAt      DateTime? @map("last_posted_at") // 最后一个回复的
  categoryId        Int       @map("category_id") @db.UnsignedInt
  lastUpdatedUserId Int?      @map("last_updated_user_id") @db.UnsignedInt // 最后一个编辑的用户（不一定是本人，也可能是版主）
  lastUpdatedAt     DateTime? @map("last_updated_at") // 最后一次编辑的时间
  deletedAt         DateTime? @map("deleted_at") // 什么时间删除的
  deletedUserId     Int?      @map("deleted_user_id") @db.UnsignedInt // 谁删除的

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // ref
  category    Category             @relation(fields: [categoryId], references: [id])
  user        User                 @relation(name: "userDiscussions", fields: [userId], references: [id])
  deletedUser User?                @relation(name: "userDeletedDiscussions", fields: [deletedUserId], references: [id])
  firstPost   Post?                @relation(name: "firstPost", fields: [firstPostId], references: [id])
  lastPost    Post?                @relation(name: "lastPost", fields: [lastPostId], references: [id])
  posts       Post[]               @relation(name: "posts")
  poster      Upload?              @relation(fields: [posterId], references: [id])
  tags        TagDiscussionRef[]
  followers   DiscussionFollower[]

  @@index([createdAt, isSticky])
  @@index([deletedAt])
  @@index([id, deletedAt])
}

// 关注的话题
// 话题在有了新的回复、或者状态发生了变化的时候，关注人就会得到通知
model DiscussionFollower {
  discussionId Int      @map("discussion_id") @db.UnsignedInt
  userId       Int      @map("user_id") @db.UnsignedInt
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  //ref
  discussion Discussion @relation(fields: [discussionId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  @@id([discussionId, userId])
}

model Post {
  id                Int       @id @default(autoincrement()) @db.UnsignedInt
  content           String    @db.Text // 内容，富文本框修饰之后的
  text              String    @db.Text // 内容，去掉富文本框之后的只有文本的内容
  type              String    @db.VarChar(64) // 类型，有可能有投票之类的
  ip                String?   @db.VarChar(64) // 发布人的 IP 地址
  replyPostId       Int?      @map("reply_post_id") @db.UnsignedInt // 回复哪一贴
  discussionId      Int       @map("discussion_id") @db.UnsignedInt
  userId            Int       @map("user_id") @db.UnsignedInt
  lastUpdatedUserId Int?      @map("last_updated_user_id") @db.UnsignedInt // 最后一个编辑的用户（不一定是本人，也可能是版主）
  lastUpdatedAt     DateTime? @map("last_updated_at") // 最后一次编辑的时间
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  deletedAt         DateTime? @map("deleted_at") // 什么时间删除的
  deletedUserId     Int?      @map("deleted_user_id") @db.UnsignedInt // 谁删除的

  // ref
  user                User              @relation(name: "userPosts", fields: [userId], references: [id])
  deletedUser         User?             @relation(name: "userDeletedPosts", fields: [deletedUserId], references: [id])
  replyPost           Post?             @relation(name: "replies", fields: [replyPostId], references: [id])
  discussion          Discussion        @relation(name: "posts", fields: [discussionId], references: [id])
  firstPostDiscussion Discussion?       @relation(name: "firstPost")
  lastPostDiscussion  Discussion?       @relation(name: "lastPost")
  reactions           ReactionPostRef[]
  replies             Post[]            @relation(name: "replies")
  uploads             UploadPostRef[]
  reports             Report[]
  bookmarks           Bookmark[]

  @@index([id, discussionId])
  @@index([discussionId, createdAt])
  @@index([userId, createdAt])
  @@index([deletedAt])
  @@index([id, deletedAt])
}

model Upload {
  id               Int    @id @default(autoincrement()) @db.UnsignedInt
  userId           Int    @map("user_id") @db.UnsignedInt // who uploaded first
  originalFileName String @map("original_file_name") @db.VarChar(256)
  fileSize         BigInt @map("file_size") @db.BigInt
  checksum         String @unique @db.VarChar(256)
  url              String @db.VarChar(512) // 这个URL 通常是'/upload'开头

  createdAt DateTime @default(now()) @map("created_at")

  //ref
  posts        UploadPostRef[]
  avatars      UploadAvatarRef[]
  discussions  Discussion[]
  siteSettings SiteSetting[]

  @@index([url])
}

// 图片头像引用
model UploadAvatarRef {
  uploadId  Int      @map("upload_id") @db.UnsignedInt
  userId    Int      @id @map("user_id") @db.UnsignedInt
  createdAt DateTime @default(now()) @map("created_at")

  // ref
  upload Upload @relation(fields: [uploadId], references: [id])
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 图片帖子引用 多对多
model UploadPostRef {
  uploadId  Int      @map("upload_id") @db.UnsignedInt
  postId    Int      @map("post_id") @db.UnsignedInt
  createdAt DateTime @default(now()) @map("created_at")

  // ref
  upload Upload @relation(fields: [uploadId], references: [id])
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([uploadId, postId])
}

model Reaction {
  id       Int    @id @default(autoincrement()) @db.UnsignedInt
  name     String @unique @db.VarChar(64)
  icon     String @db.VarChar(2048)
  position Int    @default(100) @db.UnsignedInt

  createdAt DateTime @default(now()) @map("created_at")

  // ref
  posts ReactionPostRef[]
}

// 反馈帖子引用
model ReactionPostRef {
  reactionId Int      @map("reaction_id") @db.UnsignedInt
  postId     Int      @map("post_id") @db.UnsignedInt
  userId     Int      @map("user_id") @db.UnsignedInt
  createdAt  DateTime @default(now()) @map("created_at")

  // ref
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  reaction Reaction @relation(fields: [reactionId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([reactionId, postId, userId])
}

model Category {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  slug        String   @unique @db.VarChar(64)
  name        String   @unique @db.VarChar(64)
  sequence    Int      @default(0) @db.UnsignedInt
  icon        String?  @db.VarChar(512)
  color       String?  @db.VarChar(16)
  description String?  @db.VarChar(512)
  parentId    Int?     @map("parent_id") @db.UnsignedInt // parent
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // ref
  discussions Discussion[]
}

model Notification {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  userId    Int      @map("user_id") @db.UnsignedInt // 通知接收人
  type      String   @db.VarChar(64) // 通知类型，不同的通知，内容不同
  data      String   @db.Text // 通知文本内容，一般是个 JSON
  isRead    Boolean  @default(false) @map("is_read") // 是否已读
  createdAt DateTime @default(now()) @map("created_at") // 创建时间
  updatedAt DateTime @updatedAt @map("updated_at")

  // ref
  user User @relation(fields: [userId], references: [id])

  @@index([userId, type])
}

// 帖子收藏
model Bookmark {
  userId    Int      @map("user_id") @db.UnsignedInt
  postId    Int      @map("post_id") @db.UnsignedInt
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // ref
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

// 帖子举报
model Report {
  id            Int       @id @default(autoincrement()) @db.UnsignedInt
  type          String    @db.VarChar(32) // 类别
  reason        String    @db.VarChar(512)
  postId        Int       @map("post_id") @db.UnsignedInt
  userId        Int       @map("user_id") @db.UnsignedInt
  agreed        Boolean? // 同意举报
  agreedUserId  Int?      @map("agreed_user_id") @db.UnsignedInt
  agreedAt      DateTime? @default(now()) @map("agreed_at")
  ignored       Boolean? // 忽略举报
  ignoredUserId Int?      @map("ignored_user_id") @db.UnsignedInt // 忽略的操作人
  ignoredAt     DateTime? @default(now()) @map("ignored_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // ref
  post        Post  @relation(fields: [postId], references: [id], onDelete: Cascade) // delete post will also delete all related reports
  user        User  @relation(name: "userReports", fields: [userId], references: [id], onDelete: Cascade)
  agreedUser  User? @relation(name: "userAgreedReports", fields: [agreedUserId], references: [id])
  ignoredUser User? @relation(name: "userIgnoredReports", fields: [ignoredUserId], references: [id])

  @@unique([userId, postId]) // 一个用户只能对一个帖子进行举报
}

model Tag {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  name      String   @unique @db.VarChar(64)
  textColor String?  @db.VarChar(32) // 字体颜色
  bgColor   String?  @db.VarChar(32) // 背景色
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // ref
  discussions TagDiscussionRef[]
}

// 每个主题不超过 5 个标签
model TagDiscussionRef {
  tagId        Int @map("tag_id") @db.UnsignedInt
  discussionId Int @map("discussion_id") @db.UnsignedInt
  userId       Int @map("user_id") @db.UnsignedInt

  //ref
  tag        Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade)
  discussion Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([tagId, discussionId, userId])
}

model SiteNavMenu {
  name          String   @id @db.VarChar(64)
  url           String   @default("#") @db.VarChar(2048)
  isTargetBlank Boolean  @default(false) @map("is_target_blank") // open in another tab, taget="_blank"
  sequence      Int      @default(0) @db.UnsignedInt
  createdAt     DateTime @default(now()) @map("created_at")
}

model SiteSetting {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  dataType    String   @map("data_type") @db.VarChar(16) // string(input), text(textarea), number, image, json, html, xml, etc...
  key         String   @unique @db.VarChar(64)
  description String?  @db.VarChar(128)
  name        String   @db.VarChar(64)
  value       String   @db.VarChar(256)
  uploadId    Int?     @db.UnsignedInt // 图片类型的图片引用
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // ref
  upload Upload? @relation(fields: [uploadId], references: [id])
}
